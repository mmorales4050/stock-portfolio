{"version":3,"sources":["components/Warning.js","components/LoginForm.js","components/TransactionForm.js","components/Stock.js","components/StockList.js","components/AccountPage.js","App.js","serviceWorker.js","index.js"],"names":["Warning","this","props","warning","Message","color","size","content","message","style","height","Component","LoginForm","state","register","name","email","password","activeButton","inputWarning","apiWarning","toggleRegister","e","preventDefault","newState","setState","handleChange","target","placeholder","value","handleClick","fetch","method","headers","body","JSON","stringify","then","res","json","user","loginUser","i","setInterval","window","clearInterval","Grid","textAlign","verticalAlign","Column","maxWidth","Header","as","Form","Segment","Input","fluid","onChange","type","Button","disabled","backgroundColor","onClick","href","TransactionForm","ticker","quantity","tickerWarning","decimalWarning","cashWarning","id","toUpperCase","includes","price","openPrice","parseFloat","getDate","shares","parseInt","setValue","setUser","setApiWarning","cash","toFixed","padding","Stock","setFont","openValue","vertical","portfolio","stock","float","StockList","total","stocks","map","values","transactions","AccountPage","updateValues","loading","d","Date","month","getMonth","day","year","getFullYear","length","join","getValues","forEach","setApiWarningLogin","r","Container","Menu","border","boxShadow","position","Item","Loader","active","container","columns","divided","relaxed","stackable","App","page","setPage","renderPage","className","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3746782b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {Message} from 'semantic-ui-react'\nclass Warning extends Component {\n\n  render() {\n    return (\n      this.props.warning ? <Message color=\"yellow\" size=\"small\" content={this.props.message}/> : <div style={{height:\"44.18px\"}}/>\n    );\n  }\n\n}\n\nexport default Warning;\n","import React, { Component } from 'react';\nimport { Button, Form, Grid, Header, Image, Message, Segment} from 'semantic-ui-react'\nimport Warning from './Warning';\n\n\nclass LoginForm extends Component {\n  state = {\n    register: this.props.register,\n    name: \"\",\n    email: \"\",\n    password: \"\",\n    warning: false\n  }\n\n  activeButton = () => {\n    if(this.state.register) {\n      return this.state.name === \"\" || this.state.email === \"\" || this.state.password === \"\"\n    } else {\n      return this.state.email === \"\" || this.state.password === \"\"\n    }\n  }\n\n  inputWarning = () => {\n    if(this.props.apiWarning){\n      return <Warning message='API call limit reached please wait and try again later' warning={this.props.apiWarning}/>\n    }else {\n      if(this.state.register) {\n        return <Warning message='You can only sign up for an account once with a given e-mail address' warning={this.state.warning}/>\n      }\n      return <Warning message='Please enter valid email and password' warning={this.state.warning}/>\n    }\n  }\n  // Toggle between Login and Register Pages\n  toggleRegister = (e) => {\n    e.preventDefault()\n    let newState = {...this.state, register: !this.state.register, warning: false}\n    this.setState(newState)\n  }\n\n  // Update state to store input field values\n  handleChange = (e) => {\n    let newState = {...this.state}\n    newState[e.target.placeholder] = e.target.value\n    this.setState(newState)\n  }\n\n  // Handle create account and login actions\n  handleClick = (e) => {\n    if(this.state.register) {\n      fetch(\"https://mighty-hamlet-54458.herokuapp.com/users\", {\n        method: \"POST\",\n        headers: {\"Content-Type\": \"application/json\"},\n        body: JSON.stringify({\n          name: this.state.name,\n          email: this.state.email,\n          password: this.state.password\n        })\n      })\n      .then(res => res.json())\n      .then(user => {\n        if(user.name) {\n          this.props.loginUser(user)\n        } else {\n          this.setState({...this.state, name: \"\", email: \"\", password: \"\"})\n          if(!this.state.warning){\n            this.setState({...this.state, warning: true})\n            let i = setInterval(() => {\n              this.setState({...this.state, warning: false})\n              window.clearInterval(i)\n            } , 5000)\n          }\n        }\n      })\n    }else {\n      fetch(\"https://mighty-hamlet-54458.herokuapp.com/sessions\", {\n        method: \"POST\",\n        headers: {\"Content-Type\": \"application/json\"},\n        body: JSON.stringify({\n          email: this.state.email,\n          password: this.state.password\n        })\n      })\n      .then(res => res.json())\n      .then(user => {\n        if(user.name) {\n          this.props.loginUser(user)\n        } else {\n          this.setState({...this.state, email: \"\", password: \"\"})\n          if(!this.state.warning){\n            this.setState({...this.state, warning: true})\n            let i = setInterval(() => {\n              this.setState({...this.state, warning: false})\n              window.clearInterval(i)\n            } , 3000)\n          }\n        }\n      })\n    }\n  }\n\n  render() {\n    return (\n      <Grid textAlign='center' style={{ height: '100vh' }} verticalAlign='middle'>\n        <Grid.Column style={{ maxWidth: 450 }}>\n          <Header as='h2' style={{color: \"#44829e\"}} textAlign='center'>\n            {!this.state.register ? \"Sign In\" : \"Register\"}\n          </Header>\n          <Form size='large'>\n            <Segment>\n              {!this.state.register ? null : <Form.Input fluid  placeholder='name' value={this.state.name} onChange={this.handleChange}/>}\n              <Form.Input fluid  placeholder='email' warning=\"email already used\" value={this.state.email} onChange={this.handleChange}/>\n              <Form.Input fluid placeholder='password' value={this.state.password} onChange={this.handleChange} type='password'/>\n\n              <Button disabled={this.activeButton()} style={{backgroundColor: \"#44829e\", color: \"white\"}} fluid size='large' onClick={this.handleClick}>\n                {!this.state.register ? \"Login\" : \"Create Account\"}\n              </Button>\n            </Segment>\n          </Form>\n          <Message>\n            <a href='#' onClick={this.toggleRegister}>\n            {!this.state.register ? \"Sign Up\" : \"Login\"}\n            </a>\n          </Message>\n          {this.inputWarning()}\n        </Grid.Column>\n      </Grid>\n    )\n  }\n}\n\nexport default LoginForm\n","import React, { Component } from 'react';\nimport Warning from './Warning';\nimport { Grid, Segment, Header, Input, Button } from 'semantic-ui-react'\n\nclass TransactionForm extends Component {\n\n  state = {\n    ticker: \"\",\n    quantity: \"\",\n    tickerWarning: false,\n    decimalWarning: false,\n    cashWarning: false\n  }\n\n  handleChange = (e) => {\n    let newState = {...this.state}\n    newState[e.target.id] = e.target.value.toUpperCase()\n    this.setState(newState)\n  }\n\n  inputWarning = () => {\n    if(this.props.apiWarning) {\n      return <Warning message='API call limit reached please wait and try again later' warning={this.props.apiWarning}/>\n    } else if(this.state.tickerWarning) {\n      return <Warning message='Please enter valid ticker' warning={this.state.tickerWarning}/>\n    } else if(this.state.decimalWarning){\n      return <Warning message='Please enter whole number of shares' warning={this.state.decimalWarning}/>\n    } else {\n      return <Warning message='You do not have enough cash to make this purchase' warning={this.state.cashWarning}/>\n    }\n  }\n\n  activeButton = () => {\n    return this.state.ticker === \"\" || this.state.quantity === \"\"\n  }\n\n  handleClick = (e) => {\n    // Check that quantity is whole number\n    if(this.state.quantity.includes(\".\")){\n      // invalid quantity\n      this.setState({...this.state, decimalWarning: true, ticker: \"\", quantity: \"\"})\n      let i = setInterval(() => {\n        this.setState({...this.state, decimalWarning: false})\n        window.clearInterval(i)\n      } , 3000)\n    } else {\n      let price // save price of stock\n      let openPrice // save days opening price of stock\n      fetch(`https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=${this.state.ticker}&interval=1min&outputsize=full&apikey=3RDVDP5T21BBP1FG`)\n        .then(res => res.json())\n        .then(res => {\n          if(res[\"Time Series (1min)\"]){\n            // Save price\n            price = parseFloat(res[\"Time Series (1min)\"][res[\"Meta Data\"][\"3. Last Refreshed\"]][\"4. close\"])\n            openPrice = parseFloat(res[\"Time Series (1min)\"][`${this.props.getDate()} 09:31:00`][\"1. open\"])\n            // Post Transaction\n            fetch(\"https://mighty-hamlet-54458.herokuapp.com/transactions\", {\n              method: \"POST\",\n              headers: {\"Content-Type\": \"application/json\"},\n              body: JSON.stringify({\n                user: this.props.user,\n                ticker: this.state.ticker,\n                shares: parseInt(this.state.quantity),\n                price: price\n              })\n            })\n            .then(res => res.json())\n            .then(res => {\n              if(res[\"invalid\"]){\n                // not enough cash warning\n                this.setState({...this.state, cashWarning: true, ticker: \"\", quantity: \"\"})\n                let i = setInterval(() => {\n                  this.setState({...this.state, cashWarning: false})\n                  window.clearInterval(i)\n                } , 3000)\n              } else {\n                // Valid transaction\n                this.props.setValue(this.state.ticker, this.state.quantity, price, openPrice)\n                this.setState({...this.state, ticker: \"\", quantity: \"\"})\n                this.props.setUser(res)\n              }\n            })\n          }else if (res[\"Note\"]){\n            // API warning\n            this.setState({...this.state, ticker: \"\", quantity: \"\"})\n            this.props.setApiWarning()\n          } else {\n            // invalid ticker warning\n            this.setState({...this.state, tickerWarning: true, ticker: \"\", quantity: \"\"})\n            let i = setInterval(() => {\n              this.setState({...this.state, tickerWarning: false})\n              window.clearInterval(i)\n            } , 3000)\n          }\n        })\n    }\n  }\n\n  render() {\n    return (\n      <Grid.Column>\n      <Header as='h3' textAlign='center'>\n      Cash - ${parseFloat(this.props.user.cash).toFixed(2)}\n      </Header>\n        <Input type=\"text\" id='ticker' placeholder='Ticker' onChange={this.handleChange}\n        value={this.state.ticker}\n        />\n        <br/>\n        <Input type=\"number\" id='quantity' placeholder='Qty' style={{padding: \"10px\"}}  onChange={this.handleChange} value={this.state.quantity}/>\n        <br/>\n        <Button  disabled={this.activeButton()} style={{backgroundColor: \"#44829e\", color: \"white\"}}  onClick={this.handleClick}>Buy</Button>\n        {this.inputWarning()}\n      </Grid.Column>\n    );\n  }\n\n}\n\nexport default TransactionForm;\n","import React, { Component } from 'react';\nimport {Segment} from 'semantic-ui-react'\nclass Stock extends Component {\n\n  setFont = () => {\n    if(this.props.value > this.props.openValue) {\n      return \"green\"\n    } else if(this.props.value < this.props.openValue) {\n      return \"red\"\n    } else {\n      return \"grey\"\n    }\n  }\n\n  render() {\n    return (\n      <Segment vertical textAlign=\"left\">\n      {\n        this.props.portfolio\n        ?\n        <span>\n        <span style={{color: `${this.setFont()}`}}>{this.props.stock.ticker.toUpperCase()}</span> - {this.props.stock.shares} Shares\n        </span>\n        :\n        `BUY (${this.props.stock.ticker}) - ${this.props.stock.shares} Shares @ ${parseFloat(this.props.stock.price).toFixed(2)} each`\n      }\n      {this.props.portfolio ? <span style={{float: \"right\", color: `${this.setFont()}`}}>{`$${(this.props.value * this.props.stock.shares).toFixed(2)}`}</span> : null}\n      </Segment>\n    );\n  }\n\n}\n\nexport default Stock;\n","import React, { Component } from 'react';\nimport Stock from './Stock';\nimport { Grid, Header, Segment} from 'semantic-ui-react'\n\nclass StockList extends Component {\n\n  render() {\n    return (\n      <Grid.Column>\n      <Header as='h3' content={this.props.portfolio ? `Portfolio ($${this.props.total.toFixed(2)})` : 'Transactions'} textAlign='center' />\n      {\n        this.props.portfolio\n        ?\n        this.props.user.stocks.map((stock) => {\n          return <Stock stock={stock} portfolio={this.props.portfolio} value={this.props.values[stock.ticker]} openValue={this.props.values[`${stock.ticker}-open`]}/>\n        })\n        :\n        this.props.user.transactions.map((stock) => {\n          return <Stock stock={stock} portfolio={this.props.portfolio} value={this.props.values[stock.ticker]}/>\n        })\n      }\n      </Grid.Column>\n    );\n  }\n\n}\n\nexport default StockList;\n","import React, { Component } from 'react';\nimport TransactionForm from './TransactionForm'\nimport StockList from './StockList'\nimport { Button, Form, Grid, Header, Image, Message, Segment, Container, Menu, Loader} from 'semantic-ui-react'\n\nclass AccountPage extends Component {\n\n  state = {\n    portfolio: true,\n    updateValues: false,\n    values: {},\n    total: 0.0,\n    loading: true\n  }\n\n  componentDidMount() {\n    this.getValues()\n  }\n\n  getDate = () => {\n    var d = new Date(),\n        month = '' + (d.getMonth() + 1),\n        day = '' + d.getDate(),\n        year = d.getFullYear();\n\n    if (month.length < 2)\n        month = '0' + month;\n    if (day.length < 2)\n        day = '0' + day;\n\n    return [year, month, day].join('-');\n  }\n\n  getValues = () => {\n    if(this.props.user.stocks.length === 0){\n      this.setState({...this.state, loading: false})\n    }\n    // Fetch total value of portfolio\n    // Fetch current stock values\n    this.props.user.stocks.forEach((stock, i) => {\n      fetch(`https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=${stock.ticker}&interval=1min&outputsize=full&apikey=3RDVDP5T21BBP1FG`)\n        .then(res => res.json())\n        .then(res => {\n          if(res[\"Note\"]){\n            this.props.setApiWarningLogin()\n          } else {\n            let values = {...this.state.values}\n            // Set Latest Price\n            values[stock.ticker] = parseFloat(res[\"Time Series (1min)\"][res[\"Meta Data\"][\"3. Last Refreshed\"]][\"4. close\"])\n            // Set Days opening price\n            values[`${stock.ticker}-open`] = parseFloat(res[\"Time Series (1min)\"][`${this.getDate()} 09:31:00`][\"1. open\"])\n            this.setState({...this.state, values: values, total: this.state.total + (values[stock.ticker] * stock.shares)})\n          }\n        })\n        // Loading finished\n        .then( r => {\n          if(i === (this.props.user.stocks.length - 1)){\n            this.setState({...this.state, loading: false})\n          }\n        })\n    })\n  }\n\n  setValue = (ticker, shares, price, openPrice) => {\n      let values = {...this.state.values}\n      values[ticker] = price\n      values[`${ticker}-open`] = openPrice\n      this.setState({...this.state, values: values, total: this.state.total + (price * shares)})\n  }\n\n  handleClick = (e) => {\n    if(e.target.id === \"portfolio\") {\n      this.setState({...this.state, portfolio: true})\n    } else {\n      this.setState({...this.state, portfolio: false})\n    }\n  }\n\n  render() {\n    return (\n        <div>\n        <Container>\n          <Menu style={{border: \"0px solid black\", boxShadow: \"0px 0px 0px black\"}}>\n            <Menu.Menu position=\"right\">\n            <Menu.Item id=\"portfolio\" name=\"Portfolio\" onClick={this.handleClick}></Menu.Item>\n            <Menu.Item name=\"Transactions\" onClick={this.handleClick}></Menu.Item>\n            </Menu.Menu>\n          </Menu>\n        </Container>\n          <Header as='h3' content='' textAlign='center' />\n              {\n                this.state.loading ? <Loader active/>:\n                <Grid container columns={2} divided relaxed stackable>\n                <StockList values={this.state.values}  portfolio={this.state.portfolio} user={this.props.user} total={this.state.total}/>\n                {\n                  this.state.portfolio\n                  ?\n                  <TransactionForm user={this.props.user} setUser={this.props.setUser} setValue={this.setValue} getDate={this.getDate} apiWarning={this.props.apiWarning} setApiWarning={this.props.setApiWarning}/>\n                  :\n                  null\n                }\n\n              </Grid>\n            }\n            </div>\n    );\n  }\n\n}\n\nexport default AccountPage;\n","import React, { Component } from 'react';\nimport './App.css';\nimport 'semantic-ui-css/semantic.min.css'\nimport LoginForm from './components/LoginForm'\nimport AccountPage from './components/AccountPage'\n\nclass App extends Component {\n  // state = {\n  //   page: \"ACCOUNT\",\n  //   user: {\n  //     name: \"Sam Smith\",\n  //     email: \"samsmith@gmail.com\",\n  //     cash: 5000.00,\n  //     password: \"123\",\n  //     stocks: [\n  //       {\n  //         ticker: \"msft\",\n  //         shares: 2\n  //       }\n  //     ],\n  //     transactions: [\n  //       {\n  //         ticker: \"WMD\",\n  //         shares: 2,\n  //         price: 10.12\n  //       },\n  //       {\n  //         ticker: \"MMM\",\n  //         shares: 3,\n  //         price: 11.22\n  //       }\n  //     ]\n  //   }\n  // }\n\n  state = {\n    page: \"LOGIN\",\n    user: {},\n    apiWarning: false\n}\n\n  loginUser = (user) => {\n    this.setState({\n      ...this.state,\n      user: user\n    })\n    this.setPage(\"ACCOUNT\")\n  }\n\n  setUser = (user) => {\n    this.setState({\n      ...this.state,\n      user: user\n    })\n  }\n\n  setApiWarningLogin = () => {\n    this.setState({...this.state, apiWarning: true})\n    let i = setInterval(() => {\n      this.setState({...this.state, apiWarning: false})\n      window.clearInterval(i)\n    } , 5000)\n    this.setPage(\"LOGIN\")\n  }\n\n  setApiWarning = () => {\n    this.setState({...this.state, apiWarning: true})\n    let i = setInterval(() => {\n      this.setState({...this.state, apiWarning: false})\n      window.clearInterval(i)\n    } , 5000)\n  }\n\n  setPage = (page) => {\n    let newState = {...this.state, page: page}\n    this.setState(newState)\n  }\n\n  renderPage = () => {\n    switch (this.state.page) {\n      case \"LOGIN\":\n        return <LoginForm loginUser={this.loginUser} register={false} apiWarning={this.state.apiWarning}/>\n      case \"ACCOUNT\":\n        return <AccountPage user={this.state.user} setUser={this.setUser} apiWarning={this.state.apiWarning} setApiWarning={this.setApiWarning} setApiWarningLogin={this.setApiWarningLogin}/>\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n      {this.renderPage()}\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}